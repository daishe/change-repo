name: "Build & test"

on:
  push:
    branches:
    - main
    - master
  pull_request:
  workflow_call:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    name: "Test [${{ matrix.os }}]"

    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        - windows-latest
        - macOS-latest

    runs-on: ${{ matrix.os }}

    steps:

    - name: "Checkout"
      uses: actions/checkout@v5

    - name: "Setup Go"
      uses: actions/setup-go@v6
      with:
        go-version-file: go.mod
        cache-dependency-path: "**/*.sum"

    - name: "Test project"
      run: make test

  lint:
    name: "Lint [${{ matrix.os }}]"

    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        # - windows-latest # Reenable windows linting when issue with gofmt is resolved
        - macOS-latest

    runs-on: ${{ matrix.os }}

    steps:

    - name: "Checkout"
      uses: actions/checkout@v5

    - name: "Setup Go"
      uses: actions/setup-go@v6
      with:
        go-version-file: go.mod
        cache-dependency-path: "**/*.sum"

    - name: "Lint Go code (action)"
      uses: golangci/golangci-lint-action@v8
      with:
        verify: true
        version: latest

    - name: "Lint Go code (makefile)"
      run: make lint

  check_repository_state:
    name: "Check repository state"

    runs-on: "ubuntu-latest"

    steps:

    - name: "Checkout"
      uses: actions/checkout@v5

    - name: "Setup Go"
      uses: actions/setup-go@v6
      with:
        go-version-file: go.mod
        cache-dependency-path: "**/*.sum"

    - name: "Check if `go mod tidy` has been run properly"
      run: |
        go mod tidy
        if ! (git update-index --refresh > /dev/null && git diff-index --quiet HEAD --); then
          echo 'ERROR: go.mod file is outdated.' >&2
          echo 'Please update go.mod file by running' >&2
          echo '    go mod tidy' >&2
          echo 'in the root of the repository before committing changes.' >&2
        fi

    - name: "Check if `go mod tidy` has been run properly for tools"
      run: |
        (cd tools && go mod tidy)
        if ! (git update-index --refresh > /dev/null && git diff-index --quiet HEAD --); then
          echo 'ERROR: Tools go.mod file is outdated.' >&2
          echo 'Please update tools/go.mod file by running' >&2
          echo '    (cd tools && go mod tidy)' >&2
          echo 'in the root of the repository before committing changes.' >&2
        fi

  build:
    name: "Build [${{ matrix.GOOS }}/${{ matrix.GOARCH }}]"

    strategy:
      fail-fast: false
      matrix:
        GOOS:
        - linux
        - windows
        - darwin
        GOARCH:
        - amd64
        - arm64
        APP:
        - change-repo

    runs-on: ubuntu-latest

    steps:

    - name: "Checkout"
      uses: actions/checkout@v5

    - name: "Setup Go"
      uses: actions/setup-go@v6
      with:
        go-version-file: go.mod
        cache-dependency-path: "**/*.sum"

    - name: "Extract version"
      id: get_version
      uses: battila7/get-version-action@v2

    - name: "Generate version information"
      run: |
        GIT_TAG="0.0.0-dev+$(date '+%Y%m%d%H%M%S')"
        if [[ "${{ steps.get_version.outputs.is-semver }}" == "true" ]]; then
          GIT_TAG="${{ steps.get_version.outputs.version-without-v }}"
        fi
        GIT_COMMIT=$(git rev-parse HEAD)

        echo "GIT_TAG=$GIT_TAG"
        echo "GIT_TAG=$GIT_TAG" >> $GITHUB_ENV
        echo "GIT_COMMIT=$GIT_COMMIT"
        echo "GIT_COMMIT=$GIT_COMMIT" >> $GITHUB_ENV

    - name: "Build project [${{ matrix.GOOS }}/${{ matrix.GOARCH }}]"
      run: make dist/${{ matrix.APP }}-${{ matrix.GOOS }}-${{ matrix.GOARCH }}

    - name: Archive binaries
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.APP }}-${{ matrix.GOOS }}-${{ matrix.GOARCH }}
        path: dist
        retention-days: 5
